-######################################
Version 0.03
-######################################

## Additions :
* Class BoardStarWars and BoardBergerie to differentiate algorithms.
* Class GameModel has getGame method now.
* Class BergerieGameFactory and StarWarsGameFactory created and extends GameFactory.
* Class ItemsFactory to create every possible Game, View and Execution.
* Interface IUnmovableAcceptVisitor and its subclasses to specify which creature an unmovable accepts.
* Class Command now has a reference to the SideController that called the Turn, for callback.
* Class Sheep... added, with Fence to protect sheeps.

## Modifications :
* Interface CharacterFactory becomes CreatureFactory and its methods are now ...creature... instead of ...character... .
* Interface CreatureFactory becomes an abstract class.
* Class Game has more methods that can be generalized.
* Removed BoardFactory
* Class ControllerFactory becomes GameFactory and is abstract.
* Class FemaleSheep... removed
* Class MaleSheep... removed
* Class Fence... removed

## Corrections :

## Ideas :
* Remove all SideModels children, make it class.

-######################################
Version 0.02
-######################################

## Additions :
* Class BoardFactory to create the right Board implementation.
* Interface Execution to generically decide what to do when a Turn is finished.
* Class Automatic to continue after every fished Turn.
* Class StepByStep to continue after user input (View needs to be involved).
* Interface Listable to generically list possibilities at start.

## Modifications :
* Interface SideController becomes an abstract class to reduce code repetition.
* Method createModel becomes getModel.
* Class ModelFactory removed. It was unusable since SideController became abstract.

## Corrections :
* Class GameController reference on itself useless.
* Class GameController uses List<SideController> instead of SideController (and private instead of public).
* Class GameModel uses List<SideModel> instead of SideModel (and private instead of public).
* Class Board reference on GameModel is useless because of Singleton.

## Ideas :

-######################################
Version 0.01
-######################################

## Additions
* Class `ChoiceView` at the begging of the game.
* Enumeration `ImageHelper` (Singleton) to store images.
* Interface `Game` to lists games.
* Classes `Bergerie` and `StarWarsLife` to manage correct references.
* Class `EmptyCreature` to handle everything the same way.

## Modifications
* Interface `CreatureMove` becomes abstract class.
* Class `Displacement` becomes an enumeration.
* Abstract class `View` becomes interface.
* Class `Character` becomes `Creature` and every methods accordingly.

## Corrections
* Access modifiers from public to private.
* Corrected references (Cell => Board, ...).
* Inheritance in class diagrams with interface.
* Renamed unnamed references.